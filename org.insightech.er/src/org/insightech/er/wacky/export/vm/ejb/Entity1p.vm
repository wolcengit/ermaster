package ${ejbPackage};

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.Id;
import javax.persistence.MappedSuperclass;
import javax.persistence.Table;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

#foreach (${packge} in ${tableAllPackages}) 
import ${packge};
#end
#if($table.isSupportI18n())
import java.util.Locale;
#end
 
/**
 * 实体：${tableEntity} 
 * 
 * @author wacky for ermaster
 */
@MappedSuperclass
public abstract class Abstract${tableEntity} implements java.io.Serializable,Cloneable {

	private static final long serialVersionUID = 1L;

	private static final Logger logger = LoggerFactory.getLogger(Abstract${tableEntity}.class);

#foreach (${column} in ${tableAllColumns}) 
	// $column.getDescript()
#if($column.isPk())
	@Id 
#end
	@Column($column.getColumnAnnotation())
#if(${ColumnDefult} && $column.hasDefault())
	@ColumnDefault(value="$column.getDefault()") 
#end
	private $column.getJavaClass() $column.getName();
#end

	// 构造
	/** 缺省构造 */
	public Abstract${tableEntity}() {
	}
	
	/** 主键构造 */
	public Abstract${tableEntity}($tablePk.getJavaClass() id) {
		this.$tablePk.getName() = id;
	}

	/** 完全构造 */
	public Abstract${tableEntity}($table.getAllParametersNoSec()) {
#foreach (${column} in ${tableAllColumnsNoSec}) 
		this.$column.getName() = $column.getName();
#end
	}


	// 属性 
#foreach (${column} in ${tableAllColumns}) 
	public $column.getJavaClass() get$column.getCapitalName()() {
		return this.$column.getName();
	}

	public void set$column.getCapitalName()($column.getJavaClass() $column.getName()) {
		this.$column.getName() = $column.getName();
	}
#end

	public $tablePk.getJavaClass() get${IdSuffixName}() {
		return this.$tablePk.getName();
	}

	public void set${IdSuffixName}($tablePk.getJavaClass() ${IdSuffixVar}) {
		this.$tablePk.getName() = ${IdSuffixVar};
	}
	
	public Object clone() {
		Object inst = null;
		try{
			inst = super.clone();
		}catch (Exception e) {
			logger.error("Entity.clone error!", e);
		}
		return inst;
	}
#if($table.isSupportI18n())
	public String getI18nDescript(){
		if (Locale.SIMPLIFIED_CHINESE.equals(Locale.getDefault())) {
			return getDescript();
		} else if (Locale.ENGLISH.equals(Locale.getDefault())) {
			return getDescript1();
		} else {
			return getDescript2();
		}
	}
#end

}
